name: Publish to PyPI

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to publish (e.g., v0.9.7)'
        required: true
        type: string

permissions:
  contents: read
  id-token: write  # Required for PyPI Trusted Publishing

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: tag_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG="${GITHUB_REF#refs/tags/}"
          fi
          VERSION="${TAG#v}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Publishing version: $VERSION"

      - name: Verify version in pyproject.toml
        run: |
          PACKAGE_VERSION=$(grep "^version" pyproject.toml | cut -d'"' -f2)
          TAG_VERSION="${{ steps.tag_version.outputs.version }}"
          echo "Package version: $PACKAGE_VERSION"
          echo "Tag version: $TAG_VERSION"
          if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
            echo "❌ Version mismatch between pyproject.toml ($PACKAGE_VERSION) and tag ($TAG_VERSION)"
            exit 1
          fi
          echo "✅ Versions match"

  build:
    name: Build Package
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Build package
        run: |
          uv build
          echo "✅ Package built successfully"

      - name: Check package quality
        run: |
          uv pip install --system twine
          uv run twine check dist/*
          echo "✅ Package quality check passed"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/
          if-no-files-found: error
          retention-days: 7

  publish-pypi:
    name: Publish to PyPI
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/automagik-tools

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          print-hash: true

      - name: Success notification
        run: |
          echo "🎉 Successfully published automagik-tools to PyPI!"
          echo "📦 https://pypi.org/project/automagik-tools/"

  create-github-release:
    name: Create GitHub Release
    needs: publish-pypi
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: dist/

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG="${GITHUB_REF#refs/tags/}"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=${TAG#v}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.tag }}
          body: |
            # 🚀 Release ${{ steps.version.outputs.tag }}

            ## Installation
            ```bash
            pip install automagik-tools==${{ steps.version.outputs.version }}
            # or upgrade
            pip install --upgrade automagik-tools
            ```

            ## What's Changed
            See [CHANGELOG.md](https://github.com/namastexlabs/automagik-tools/blob/main/CHANGELOG.md) for details.

            ## PyPI
            📦 https://pypi.org/project/automagik-tools/${{ steps.version.outputs.version }}/

            ---
            *Generated by GitHub Actions*
          files: dist/*
          draft: false
          prerelease: false

      - name: Final success message
        run: |
          echo "✅ Release ${{ steps.version.outputs.tag }} created successfully!"
          echo "📦 PyPI: https://pypi.org/project/automagik-tools/"
          echo "🐙 GitHub: https://github.com/namastexlabs/automagik-tools/releases/tag/${{ steps.version.outputs.tag }}"
